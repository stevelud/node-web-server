<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="utf-8">
   <title>Guess the Word!</title>
   <!--
   <link href="styles.css" rel="stylesheet">
   <script src="scripts.js"></script>
   -->
   <style>
     body {
       padding:3em;
     }
     .GameContainer, .dictionary-row {
       width:60%;
       min-width:1000px;
       margin:auto;
       padding:.5em;
       background-color:lightgrey;
       overflow:auto;
       border-radius:.5em;
     }
     .WordBar div {
       display:inline-block;
       margin-top:.2em;
     }
     .LetterUnit {
       min-height:1.6em;
       min-width:1.3em;
       padding:.5em;
       margin-right:.2em;
       text-align:center;
       background-color:white;
       border:2px solid black;
       font-weight:900;
       border-radius:.3em;
     }
     .LetterUnit:hover {
       background-color:black;
       color:white;
     }
     .Keyboard .LetterUnit {
       min-height:.8em;
       min-width:.6em;
       padding:.5em;
       display:inline-block;
       border:none;
       background-color:clear;
       margin-top:.2em;
     }
     input[type="text"] {
       margin-right:8px;
       height:2.6em;
       border-radius:5px;
       padding-left:2em;
       font-weight:bolder;
     }
     button {
       height:3em;
       width:100px;
       border-radius:5px;
       background-color: white;
       color:black;
     }
     button:hover {
       background-color:black;
       color:white;
     }
     button:active {
       background-color:blue;
     }
     .col1 {
       min-width:70%;
       display:inline-block;
       float:left;
     }
     .col2 {
       /*width:35%;*/
       display:inline-block;
       float:left;
     }
     .kbrow2 {
       margin-left:1em;
     }
     .kbrow3 {
       margin-left:2.2em;
     }
     .GuessCounterBar {
       color:black;
       font-weight:bolder;
       margin-top:.7em;
     }
     .Message {
       margin-left:1em;
       color:blue;
       font-weight:bolder;
     }
     .hidden {
       visibility:hidden;
     }
     .badGuessLetter {
       background-color:red;
       color:white;
     }
     .goodGuessLetter {
       background-color:green;
       color:white;
     }
     .dictionary-row {
       margin-top:.4em;
       min-height:6em;
       visibility:hidden;
     }
     .dictionary-row h3 {
       font-style:italic;
       text-decoration:underline;
       margin-left:2em;
     }
   </style>

<body>
      <!-- Target container -->
      <div id="target-one"></div>

      <!-- For Production -->

      <script crossorigin src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
      <script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>

      <!-- Babel -->
      <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.29/browser.js"></script>

      <script type="text/babel">

        let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
          'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
          'v', 'w', 'x', 'y', 'z'];

        function getWordPath() {
          // retrieve word, and dictionary definition data for word
          let i = 25*Math.random();
          i = Math.floor(i);
          let n = Math.random(6);
          let questionString = "?";

          while (n > 0) {
            questionString += "?";
            n = n - 1;
          }

          let firstLetter = alphabet[i];

          let path = "https://api.datamuse.com/words?sp=" + firstLetter +
            "????" +  questionString;
          return path;
        }


        class GameContainer extends React.Component {
          constructor(props) {
            super(props)
            this.state = {
              guess: "",
              word: "",
              lettersGuessed: [],
              guessesLeft: 4,
              message: "",
              gameOver:false,
            }
            this.guessLetter = this.guessLetter.bind(this)
            this.handleChange = this.handleChange.bind(this)
            this.handleClick = this.handleClick.bind(this)
            this.handleKeyDown = this.handleKeyDown.bind(this)


            // retrieve word, and dictionary definition data for word
            let path = getWordPath();

            console.log(path);

            fetch(path)
                .then(response => response.json())
                .then(data => {
                    let i = 25*Math.random(25);
                    i = Math.floor(i);

                    console.log(data[i].word)
                    
                    this.setState({
                      word: data[i].word,
                    })
                    
                });
          }

          handleChange(event) {
            this.setState({ guess: event.target.value })
            console.log(event.target.value)
          }
          handleClick(event) {
            event.target.value = "";
            this.setState({ guess: event.target.value })
          }
          handleKeyDown(event) {
            if (event.keyCode == 13 && this.state.guessesLeft > 0) {    //enter
              this.guessLetter()
            }
          }
          componentDidMount() {
            document.addEventListener('keydown', this.handleKeyDown);
          }

          componentWillUnMount() {
            document.removeEventlistener('keydown', this.handleKeyDown);
          }


          guessLetter() {
            // TO DO: include a sub method that, if the guess is wrong,
            // flashes in red letters some msg like 'no bad guess!'

            let g = this.state.guess;
            let word = this.state.word;
            let guesses = this.state.lettersGuessed;
            let guessesLeft = this.state.guessesLeft;

            function checkForCompletion(word, guesses) {
              for (let i = 0; i<word.length; i++) {
                if (!guesses.includes(word[i])) {
                  return false
                }
              }
              return true
            }

            if (g === "") {
              return this.setState({ message: "You didn't make a guess!" })
            }

            if (!alphabet.includes(g)) {
              return this.setState({ message: "That is not actually a letter." })
            }

            if (guesses.includes(g)) {
              return this.setState({ message: "You already guessed " + g + ".",
                                      guess: "" });
            }

            if (word.includes(g)) {
              guesses.push(g);
              if (checkForCompletion(word, guesses)) {
                return this.setState({
                  message: "Congratulations! You got it!!",
                  gameOver:true,
                  guess:"",
                })
              } else {
                return this.setState({
                  lettersGuessed: guesses,
                  message: "Good guess! The letter " + g + " is in the word.",
                  guess: "",
                  });
              }
            } else if (this.state.guessesLeft > 1) {
              guesses.push(g)
              return this.setState({
                lettersGuessed: guesses,
                guessesLeft: guessesLeft - 1,
                message: "Bad guess. The letter " + g + " is not in the word.",
                guess: "",
              })
            } else {
              return this.setState({
                lettersGuessed: guesses,
                guessesLeft: guessesLeft - 1,
                message: "Oh no! No more guesses." +
                " The word is " + this.state.word + ".",
                gameOver:true,
              })
            }
            console.log(this.state.lettersGuessed)
          }

          /*
          componentWillUpdate() {
            fetch.
          }
          */
          render() {
            let handleGuess;
            if (!this.state.gameOver) {
              handleGuess = this.guessLetter;
            } else {
              handleGuess = null;
            }

            return (
              <div>
                <div className="GameContainer">
                  <div className="col1">
                    <PlayerFrame playerName="Human"
                                 buttonHandler={handleGuess}
                                 inputHandler={this.handleChange}
                                 handleClick={this.handleClick}
                                 message={this.state.message}
                                 guess={this.state.guess} />
                    <GuessCounterBar guessesLeft={this.state.guessesLeft} />
                    <WordBar word={this.state.word}
                             lettersGuessed={this.state.lettersGuessed} />
                  </div>
                  <div className="col2">
                    <Keyboard lettersGuessed={this.state.lettersGuessed}
                              word={this.state.word} />
                  </div>
                </div>
                <div className="dictionary-row">
                  <DictionaryRow word={this.state.word} />
                </div>
              </div>
            )
          }
        }

        const DictionaryRow = (props) => {
          return (
            <div>
              <h3>{props.word}</h3>
            </div>
          )
        }

        const PlayerFrame = (props) => {
          return (
             <div className="PlayerFrame">
               <GuessBar inputHandler={props.inputHandler} handleClick={props.handleClick}
                  guess={props.guess} />
               <GuessButton buttonHandler={props.buttonHandler} />
               <MessageBar message={props.message} />
             </div>
          )
        }

        const MessageBar = (props) => {
          return (
            <span className="Message">{props.message}</span>
          )
        }

        const GuessBar = (props) => {
          return <input type="text" size="5" maxLength="1"
            placeholder="" onChange={props.inputHandler}
            onClick={props.handleClick} value={props.guess} />
        }

        const GuessCounterBar = (props) => {
          return (
            <div className="GuessCounterBar">You have {props.guessesLeft} guesses left!</div>
          )
        }

        const GuessButton = (props) => {
          return (
            <button onClick={props.buttonHandler}>Guess!</button>
          )
        }

        const WordBar = (props) => {

          let wordArray = [];
          let lettersGuessed = props.lettersGuessed; // this is an array of letters

          for (let i=0; i<props.word.length; i++) {
              if (lettersGuessed.includes(props.word[i])) {
                wordArray.push([props.word[i], ""]);
            } else {
              wordArray.push([props.word[i], "hidden"]);
            }
          }

          return (
            <div className="WordBar">
              {wordArray.map((letter, i) => <LetterUnit key={i} letter={letter[0]}
                                              hidden={letter[1]} />)}
            </div>
          )
        }

        const LetterUnit = (props) => {
          return <div className="LetterUnit">
            <div className={props.hidden}>{props.letter}</div>
          </div>
        }

        const KeyboardUnit = (props) => {
          return <div className={props.guessStatus}>
            {props.letter}
          </div>
        }

        const Keyboard = (props) => {
          let alphabetRowOne = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'];
          let alphabetRowTwo = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'];
          let alphabetRowThree = ['z', 'x', 'c', 'v', 'b', 'n', 'm'];

          let lettersGuessed = props.lettersGuessed; // array of guessed letters
          let word = props.word; // string representation of word to be guessed

          function returnGuessClass(letter, word, lettersGuessed) {
            if (lettersGuessed.includes(letter) && word.includes(letter)) {
              return "LetterUnit goodGuessLetter"
            } else if (lettersGuessed.includes(letter) && !word.includes(letter)) {
              return "LetterUnit badGuessLetter"
            } else {
              return "LetterUnit"
            }
          }

          return (
            <div className="Keyboard">
              <div className="kbrow1">
              {alphabetRowOne.map((letter, i) => <KeyboardUnit key={i} letter={letter}
                                guessStatus={returnGuessClass(letter, word, lettersGuessed)} />)}
              </div>
              <div className="kbrow2">
              {alphabetRowTwo.map((letter, i) => <KeyboardUnit key={i} letter={letter}
                                  guessStatus={returnGuessClass(letter, word, lettersGuessed)} />)}
              </div>
              <div className="kbrow3">
              {alphabetRowThree.map((letter, i) => <KeyboardUnit key={i} letter={letter}
                                  guessStatus={returnGuessClass(letter, word, lettersGuessed)} />)}
              </div>
            </div>
          )
        }

        ReactDOM.render(<GameContainer />,
            document.getElementById('target-one'))
      </script>


</body>
</html>
